#!/bin/bash
#----------------------------------------------------------------------
# Ericsson Network IQ utility to change the User Password in repdb
#
# Usage: ChangeUserPasswordsInRepdb -u <USERNAME>
#
# ---------------------------------------------------------------------
# (c) Ericsson Radio Systems AB 2019 - All rights reserved.
# ---------------------------------------------------------------------

TIMESTAMP=`date +%d.%m.%Y`

LOGFILE=/eniq/log/sw_log/engine/repdb_user_password_${TIMESTAMP}.log


EchoText() {
   echo -e $*
   echo -e `date '+%Y-%m-%d %H:%M:%S': ` $* >> ${LOGFILE}
}
########################################################################
# Function: usage_msg
# Displays the usage message
#
# Arguments: None
#
# Return Values: None
usage_msg() {
	EchoText "ChangeUserPasswordsInRepdb -u <USERNAME>"
	EchoText "u: User Name"
	
	remove_lock_file
	
	exit 10
}



########################################################################
# Function: configure_java
# Configures the environment for executing Java directly from bash.
# 
# Arguments: None
# 
# Return Values: None
configure_java() {
  CPATH="${INSTALLER_DIR}/lib/installer.jar"

  DIRS=`ls ${PLATFORM_DIR}`

  for file in $DIRS
  do
    if [ -d ${PLATFORM_DIR}/$file/dclib ]
    then
	  JARS=`ls ${PLATFORM_DIR}/$file/dclib/*.jar`

	  for jar in $JARS
	  do
	    CPATH="${CPATH}:${jar}"
	  done
    fi
  done

  JAVA_HOME=${RT_DIR}/java
  export JAVA_HOME

  PATH=${RT_DIR}/java/bin:${PATH}
  export PATH
}

########################################################################
# Function: encrypt_all_passwords
# Encrypts all the un-encrypted passwords in Meta_Databases Table in etlrep
# 
# Arguments: None
# 
# Return Values: None
encrypt_all_passwords() {
  
  if [ -s /eniq/admin/lib/common_functions.lib ]; then
    . /eniq/admin/lib/common_functions.lib
  else
    EchoText "Could not find /eniq/admin/lib/common_functions.lib"
	remove_lock_file
    exit 2
  fi

  ETLREPUSER=`inigetpassword REP -v ETLREPUsername -f ${CONF_DIR}/niq.ini`
  ETLREPPASSWORD=`inigetpassword REP -v ETLREPPassword -f ${CONF_DIR}/niq.ini`
  REP_PORT=`iniget REP -v PortNumber -f ${CONF_DIR}/niq.ini`
  REP_SERVER_NAME=`iniget REP -v ServerName -f ${CONF_DIR}/niq.ini`
  
  ## Need to ensure that all the services except repdb is stopped before the sql is executed.
  
  ## Add the Encryption_Flag column to Meta_Databases Table in etlrep if it doesn't exists already
  ## Increase the length of the PASSWORD column from 30 to 128
  $DBISQL -c "eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$ETLREPUSER;pwd=$ETLREPPASSWORD" -onerror exit -nogui  "IF COL_LENGTH('ETLREP.META_DATABASES', 'ENCRYPTION_FLAG') IS NULL
		  BEGIN
		    ALTER TABLE ETLREP.META_DATABASES ADD ENCRYPTION_FLAG VARCHAR(2) DEFAULT 'N' NOT NULL
		  END
		  IF COL_LENGTH('ETLREP.META_DATABASES', 'PASSWORD') <> 128
		  BEGIN
		    ALTER TABLE ETLREP.META_DATABASES MODIFY PASSWORD VARCHAR(128)
		  END" > /dev/null 2>&1
  exitCode=${?}
  if [[ $exitCode -ne 0 ]]
  then
    EchoText "Could not alter the META_DATABASES table. Exiting.."
  else 
    configure_java
    ${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass "ALL" >> ${LOGFILE}
	exitCode=${?}
  fi
  
  if [[ $exitCode -ne 0 ]]
  then
    EchoText "Could not encrypt the passwords in META_DATABASES table. Exiting.."
  else
  	EchoText "Encrypted the passwords in META_DATABASES table..."
  fi
     
  remove_lock_file
  
  exit ${exitCode}
}

########################################################################
# Function: check_lock_file_presence 
# Checks if the lock file is present
#
# Arguments: None
#
# Return Values: None
check_lock_file_presence()
{
  if [ -r $LOCK_FILE ]
  then
    EchoText "One instance of this process is already running. Hence aborting."
    exit 10
  else
    touch $LOCK_FILE
    if [ $? -ne 0 ]; then
      EchoText "Could not write to file $LOCK_FILE"
      exit 2
    fi
  fi
}

########################################################################
# Function: remove_lock_file
# Removes/Deletes lock file once the script terminates
#
# Arguments: None
#
# Return Values: None
remove_lock_file()
{
  if [ -f $LOCK_FILE ]; then
    rm -rf $LOCK_FILE 2>&1 > /dev/null
    if [ -f "$LOCK_FILE" ]; then
      EchoText "\nFailed to delete lock file $LOCK_FILE."
    fi
  fi
}


############################ Main Body #################################

. /eniq/home/dcuser/.profile

DBISQL="$(ls /eniq/sybase_iq/IQ-*/bin64/dbisql)"

if [ -z "${CONF_DIR}" ] ; then
  EchoText "ERROR: CONF_DIR is not set"
  exit 1
fi

if [ ! -r "${CONF_DIR}/niq.rc" ] ; then
  EchoText "ERROR: Source file is not readable at ${CONF_DIR}/niq.rc"
  exit 2
fi

. ${CONF_DIR}/niq.rc

LOCK_FILE=${CONF_DIR}/.changeUserPassLock.tmp
BY_PASS="False"

check_lock_file_presence

while getopts  "u:p:af" flag ; do
  case $flag in
  a)  encrypt_all_passwords
      ;;
  f)  BY_PASS="True"
      ;;
  u)  [[ -z "$OPTARG" || "$OPTARG" == "" ]] && usage_msg
      DBUSER="$OPTARG"
      ;;
  p)  [[ -z "$OPTARG" || "$OPTARG" == "" ]] && EchoText "-p option expects an argument. Incorrect usage, hence exiting..." && remove_lock_file && exit 10
      NEW_PASSWORD="$OPTARG"
      ;;
  \?) usage_msg
      ;;
  esac
done

[[ -z "$DBUSER" ]] && usage_msg

configure_java

if [ "$BY_PASS" != "True" ]
then
  
  while :; do
    EchoText "Enter Old Password:"
    read -s OLD_PASSWORD
    [[ -z "$OLD_PASSWORD" ]] && EchoText "Old Password cannot be empty. Please try re-entering the password." && continue
	
	EchoText "Enter New Password:"
    read -rs NEW_PASSWORD
	EchoText "Re-enter New Password:"
	read -rs NEW_PASSWORD_reenter
	
	password_length=${#NEW_PASSWORD}
	
    if [ "$NEW_PASSWORD" != "$NEW_PASSWORD_reenter" ] ; then
		EchoText "Mismatch in new password and re-entered new password. Please enter correctly."
		continue
	elif  [ -z "${NEW_PASSWORD}" ] ; then
		EchoText "The new password cannot be empty."
		continue
	elif [[ "${NEW_PASSWORD}" =~ ^.*[[:space:]]+.*$ ]] ; then
		EchoText "The new password cannot contain white spaces."
		continue
	elif [[ "${NEW_PASSWORD}" =~ ^.*\\+.*$ ]] ; then
		EchoText "The new password entered is not compliant with the Password Policies defined. It should not contain a '\\' character."
		continue
	elif [[ "$DBUSER" == "dcuser" && ${password_length} -lt 8 ]]; then
		EchoText "The new password length should not be less than 8 characters."
		continue
	elif [[ ${password_length} -gt 128 ]]; then
		EchoText "The new password length should not be more than 128 characters."
		continue
	## In order to restrict any character in the given Password, the below code can be uncommented.
    ## elif [[ "${NEW_PASSWORD}" =~ ^.*[\'\"]+.*$ ]] ; then
      ## echo "The new password entered is not compliant with the Password Policy as it contains single quote (') or double quotes (\") characters."
	  ## continue
	fi
	break
  done
  
  ${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass ${DBUSER} ${OLD_PASSWORD} ${NEW_PASSWORD} >> ${LOGFILE}
  E=${?}
  if [ ${E} -eq 0 ]; then
  	EchoText "Password updated successfully for: ${DBUSER}"
  else
  	EchoText "Password updated failed for: ${DBUSER}"
  fi
  	
else
  [[ -z "$NEW_PASSWORD" ]] && EchoText "The utility should be called with -p option when -f is enabled. Incorrect usage, hence exiting..." && remove_lock_file && exit 10

  ${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass "ByPass" ${DBUSER} ${NEW_PASSWORD} >> ${LOGFILE}
  E=${?}
  if [ ${E} -eq 0 ]; then
  	EchoText "New Password updated successfully for: ${DBUSER}"
  else
  	EchoText "New Password updated failed for: ${DBUSER}"
  fi
fi

remove_lock_file

exit ${E}

