'''
Created on Jun 10, 2016

@author: ebrifol
'''

class Table(object):

    def __init__(self,tablename):
        self.tablename = tablename
        self.columns = []
        self.primary_keys = []
        self.foreign_keys = {}
    
    def getTablename(self):
        return self.tablename
    
    def addColumn(self, column):
        self.columns.append(column)
        
    def addPrimary_key(self, keyname):
        self.primary_keys.append(keyname)
    
    def addForeign_key(self, reference, keyname):
        self.foreign_keys[reference] = keyname

    def createColumnSQL(self, cname, coltype, length, default_value, nulls):
        column = cname + ' '
        
        if 'varchar' in coltype:
            column = column + coltype.replace(' ', '') + '(' + length + ') '
        elif coltype.lower() == 'numeric':
            column = column + coltype.replace(' ', '') + '(' + length + ',0) '
        elif coltype.lower() == 'unsigned int':
            column = column + 'int '
        else:
            column = column + coltype.replace(' ', '') + ' ';
        
        if default_value.lower() != 'autoincrement':
            column = column + 'DEFAULT ' + default_value + ' ';
        else:
            column = column + 'GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) '
        
        if nulls == 'N':
            column = column + 'NOT NULL'
                
        self.addColumn(column)
    
    def createSQL(self):
        SQL = 'CREATE TABLE ' + self.tablename + ' ( \n'
        
        count = 0
        for column in self.columns:
            SQL = SQL + column
            if count != len(self.columns)-1:
                SQL = SQL +', \n'
            count+=1
        
        if len(self.primary_keys) > 0:
            SQL = SQL + '\n, PRIMARY KEY ('
            keys = ''
            for keyname in self.primary_keys:
                if keys != '':
                    keys = keys + ', '
                keys = keys + keyname
            SQL = SQL + keys + ' ) \n'
                
        if len(self.foreign_keys) > 0:
            for reference, keyname in self.foreign_keys.iteritems():
                SQL = SQL + ', CONSTRAINT '  + reference + '\n'

                SQL = SQL + 'FOREIGN KEY ' + keyname.split(':')[1] + '\n';
                SQL = SQL + 'REFERENCES ' + keyname.split(':')[0] + ' \n' 
        
        SQL = SQL + ');'
        return SQL
